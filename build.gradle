buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'org.ow2.asm:asm:9.7.1'
		classpath 'org.ow2.asm:asm-tree:9.7.1'
		classpath 'org.ow2.asm:asm-commons:9.7.1'
		// just used for shrinking. i've used proguard a lot and trust it
		classpath 'com.guardsquare:proguard-gradle:7.6.1'
	}
}

plugins {
	id 'com.github.ben-manes.versions' version '0.52.0'
	id 'com.gradleup.shadow' version '8.3.6'
	id 'java-library'
	id 'maven-publish'
}

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Collections;
import java.util.Iterator;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import java.util.zip.ZipFile;
import java.util.zip.ZipOutputStream;

import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.tree.AnnotationNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.LdcInsnNode;

base {
	group = 'com.unascribed'
	archivesName = 'unsup'
	version = '1.1'+(project.hasProperty("unsup.ci") ? '-SNAPSHOT' : '')
}

sourceCompatibility = targetCompatibility = 8

repositories { 
	mavenCentral()
	maven { url 'https://repo.sleeping.town' }
}

sourceSets {
	// prevent crossing puppet/agent boundary
	puppet {
		compileClasspath += sourceSets.main.compileClasspath
		compileClasspath += sourceSets.main.output
	}
	agent {
		compileClasspath += sourceSets.main.compileClasspath
		compileClasspath += sourceSets.main.output
	}
}

configurations {
	shade
	implementation.extendsFrom shade
	include
	compileOnly.extendsFrom include
}

dependencies {

	def shadeCis = {
		shade(it) {
			transitive = false
		}
	}

	shade 'com.grack:nanojson:1.9'
	shade 'net.i2p.crypto:eddsa:0.3.0'
	shade('com.squareup.okhttp3:okhttp:4.12.0') {
		exclude group: 'org.jetbrains'
		exclude module: 'kotlin-stdlib-common'
	}
	shadeCis 'com.squareup.okhttp3:okhttp-dnsoverhttps:4.12.0'
	shadeCis 'com.squareup.okhttp3:okhttp-tls:4.12.0'
	shadeCis 'com.moandjiezana.toml:toml4j:0.7.2'
	shade 'com.unascribed:flexver-java:1.1.1'
	
	lwjgl(it, '3.3.6', 'glfw', 'opengl')
}

jar {
	archiveClassifier = 'slim'
	destinationDirectory.set(file('build/tmp'))
	from sourceSets.puppet.output
	from sourceSets.agent.output
}

shadowJar {
	archiveClassifier = 'fat'
	destinationDirectory.set(file('build/tmp'))
	configurations = [project.configurations.shade]
	["net.i2p.crypto", "kotlin", "okio", "okhttp3", "com.grack.nanojson", "com.moandjiezana.toml", "com.unascribed.flexver", "org.objectweb"].each {
		relocate it, 'com.unascribed.sup.lib.'+it
	}
	from sourceSets.puppet.output
	from sourceSets.agent.output
	
	exclude 'javax/annotation/**'
}

tasks.named("dependencyUpdates").configure {
	gradleReleaseChannel = 'current'
	revision = 'release'
	rejectVersionIf {
		it.candidate.version.contains("alpha") || it.candidate.version.contains("beta")
	}
}

def pgLibJars = files(
	System.properties["java.home"]+"/jmods/java.base.jmod", // everyone needs java base
	System.properties["java.home"]+"/jmods/java.desktop.jmod", // used by the puppet
	System.properties["java.home"]+"/jmods/java.management.jmod", // for the agent
)

task proguard(type: proguard.gradle.ProGuardTask) {
	dependsOn shadowJar
	injars shadowJar.archivePath
	libraryjars pgLibJars
	outjars 'build/tmp/proguard.jar'
	
	// releasing open source programs as obfuscated jars is bad praxis
	// (yes, pg's optimization is a form of obfuscation! let the JIT handle that)
	dontoptimize
	dontobfuscate
	
	keep 'class com.unascribed.sup.Agent { *; }'
	keep 'class com.unascribed.sup.Puppet { *; }'
	keep 'class com.unascribed.sup.GLPuppet { *; }'
	keep 'class com.unascribed.sup.SwingPuppet { *; }'
	keep 'class com.unascribed.sup.Unsup { *; }'
	keep 'class com.unascribed.sup.PublicInAgent { *; }'
	
	keepclassmembers 'enum * { public static **[] values(); public static ** valueOf(java.lang.String); }'

	dontwarn 'com.unascribed.sup.lib.**'
	dontwarn 'org.jetbrains.annotations.**'
	dontwarn 'org.lwjgl.**'
	dontwarn 'javax.annotation.**'
	
	keepattributes '*'
	
	verbose
}

// merge everything into one package so it can be package-private
task proguardAgain(type: proguard.gradle.ProGuardTask) {
	doFirst {
		def pat = java.util.regex.Pattern.compile('^(com/unascribed/sup/([^/]+)/(.*))\\.class$')
		file('build/tmp/mapping.map').withWriter {
			ZipFile zf = new ZipFile("build/tmp/proguard.jar");
			for (ZipEntry ze : Collections.list(zf.entries())) {
				def m = pat.matcher(ze.getName())
				if (m.matches()) {
					def inName = m.group(1).replace('/', '.')
					def outName = inName.replace('.', '_').replace("com_unascribed_sup_"+m.group(2)+"_", 'com.unascribed.sup.$'+m.group(2)+'$$')
					it.write("${inName} -> ${outName}:\n")
				}
			}
		}
	}

	dependsOn proguard
	injars 'build/tmp/proguard.jar'
	libraryjars pgLibJars
	outjars 'build/tmp/proguard2.jar'
	
	dontoptimize
	
	// prevent our classes from being renamed
	keep 'class com.unascribed.sup.* { *; }'
	
	// prevent members from being renamed
	keepclassmembers(allowshrinking:true, allowoptimization:true, 'class * { *; }')
	keepclassmembers 'enum * { public static **[] values(); public static ** valueOf(java.lang.String); }'

	dontwarn 'com.unascribed.sup.lib.**'
	dontwarn 'org.jetbrains.annotations.**'
	dontwarn 'org.lwjgl.**'
	dontwarn 'javax.annotation.**'
	
	flattenpackagehierarchy 'com.unascribed.sup'
	
	keepattributes '*'
	
	applymapping 'build/tmp/mapping.map'
	
}

task proguardJar(type: Jar) {
	dependsOn proguardAgain
	from(zipTree('build/tmp/proguard2.jar'))
	
	eachFile {
		if (it.path.equals('com/unascribed/sup/lib/okhttp3/internal/publicsuffix/publicsuffixes.gz')) {
			it.path = 'com/unascribed/sup/publicsuffixes.gz'
		}
		if (it.path.equals('com/unascribed/sup/lib/okhttp3/internal/publicsuffix/NOTICE')) {
			it.path = 'com/unascribed/sup/publicsuffixes_notice.txt'
		}
	}
	
	from(project.configurations.include.resolve()) {
		into 'com/unascribed/sup/jars'
	}
	
	exclude 'com/unascribed/sup/$lib$$okhttp3_internal_platform_android*'
	exclude 'com/unascribed/sup/$lib$$okhttp3_internal_platform_Android*'
	
	exclude 'META-INF/**'
	exclude '**/*.kotlin_metadata'
	exclude '**/*.kotlin_builtins'
	manifest {
		attributes (
			'Main-Class': 'com.unascribed.sup.Agent',
			'Premain-Class': 'com.unascribed.sup.Agent'
		)
	}
}

task amendClassPrivacy {
	dependsOn proguardJar
	doFirst {
		File tmp = new File("build/tmp/amended.jar");
		ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(tmp));
		ZipFile zf = new ZipFile(proguardJar.archivePath);
		for (ZipEntry ze : Collections.list(zf.entries())) {
			if (ze.getName().equals("com/unascribed/sup/PublicInAgent.class")) continue;
			ZipEntry copy = new ZipEntry(ze.getName());
			copy.setMethod(ze.getMethod());
			zos.putNextEntry(copy);
			if (ze.getName().endsWith(".class") && ze.getName().startsWith("com/unascribed/sup/") && ze.getName().lastIndexOf('/') == 18) {
				ClassReader cr = new ClassReader(zf.getInputStream(ze));
				ClassNode clazz = new ClassNode();
				cr.accept(clazz, 0);
				boolean amend = true;
				if (clazz.invisibleAnnotations != null) {
					Iterator<AnnotationNode> iter = clazz.invisibleAnnotations.iterator();
					while (iter.hasNext()) {
						if (iter.next().desc.equals("Lcom/unascribed/sup/PublicInAgent;")) {
							amend = false;
							iter.remove();
							break;
						}
					}
				}
				if (amend) {
					clazz.access &= ~Opcodes.ACC_PUBLIC;
					clazz.access &= ~Opcodes.ACC_PROTECTED;
				}
				if (clazz.name == 'com/unascribed/sup/Util') {
					clazz.methods.each {
						if (it.name == '<clinit>') {
							it.instructions.each {
								if (it instanceof LdcInsnNode && it.cst instanceof String && it.cst == '${version}') {
									it.cst = project.version;
								}
							}
						}
					}
				}
				ClassWriter cw = new ClassWriter(0);
				clazz.accept(cw);
				zos.write(cw.toByteArray());
			} else {
				zf.getInputStream(ze).transferTo(zos);
			}
		}
		zf.close();
		zos.close();
		tmp.renameTo(proguardJar.archivePath);
	}
}

build.dependsOn amendClassPrivacy

def sigFile = file('build/libs/unsup-'+version+'.jar.sig')

if (project.hasProperty("unsup.signifyKey")) {
	task sign(type: Exec) {
		def pipe = new PipedInputStream()
		doFirst {
			def p = new ProcessBuilder(project.getProperty("unsup.signifyPasswordCommand").split(" "))
				.redirectError(ProcessBuilder.Redirect.INHERIT)
				.start()
			p.outputStream.close()
			def pipeout = new PipedOutputStream(pipe)
			p.inputStream.transferTo pipeout
			pipeout.close()
		}		
		dependsOn proguardJar
		inputs.file proguardJar.archivePath
		outputs.file sigFile
		commandLine 'signify', '-S', '-s', project.getProperty("unsup.signifyKey"), '-m', proguardJar.archivePath.absolutePath, '-x', sigFile.absolutePath
		standardInput pipe
	}
} else if (project.hasProperty("unsup.ci")) {
	task sign(type: Exec) {
		doFirst {
			file('/tmp/signify.sec').text = System.getenv("SIGNIFY_KEY")+'\n'
		}
		dependsOn proguardJar
		inputs.file proguardJar.archivePath
		outputs.file sigFile
		commandLine './.ci/signify-openbsd', '-S', '-s', '/tmp/signify.sec', '-m', proguardJar.archivePath.absolutePath, '-x', sigFile.absolutePath
		standardInput new java.io.ByteArrayInputStream(System.getenv("SIGNIFY_PASSWORD").getBytes("UTF-8"))
	}
}

publishing {
	repositories {
		if (project.hasProperty("publish-username")) {
			maven {
				url "https://repo-api.sleeping.town/"
				credentials {
					username project.hasProperty("publish-username") ? project.getProperty("publish-username") : null
					password project.hasProperty("publish-password") ? project.getProperty("publish-password") : null
				}
			}
		} else if (project.hasProperty("unsup.ci")) {
			maven {
				url "https://repo-api.sleeping.town/"
				credentials {
					username System.getenv("MAVEN_USERNAME")
					password System.getenv("MAVEN_PASSWORD")
				}
			}
		}
		maven {
			url file('build/maven').toURI().toString()
		}
	}
	publications {
		maven(MavenPublication) {
			groupId = 'com.unascribed'
			artifactId = 'unsup'
			version = project.version

			artifact proguardJar
			if (project.hasProperty("unsup.ci") || project.hasProperty("unsup.signifyKey")) {
				artifact(sigFile) {
					builtBy sign
					extension 'jar.sig'
				}
			}
		}
	}
}

def lwjgl(DependencyHandler deps, String ver, String... modules) {
	// minimal set, as the Swing impl will be used if the GL one can't init and these are quite large
	def platforms = [
		'linux', 'macos', 'windows',
		'linux-arm64',
		'macos-arm64',
		
		// 'windows-x86',
		// 'linux-arm32', 'linux-ppc64le', 'linux-riscv64',
		// 'windows-arm64',
		// 'freebsd',
	]
	
	deps.include(dependencies.create("org.lwjgl:lwjgl:${ver}"))
	modules.each { module ->
		deps.include(dependencies.create("org.lwjgl:lwjgl-${module}:${ver}"))
	}
	platforms.each { platform ->
		deps.include(dependencies.create("org.lwjgl:lwjgl:${ver}:natives-${platform}"))
		modules.each { module ->
			deps.include(dependencies.create("org.lwjgl:lwjgl-${module}:${ver}:natives-${platform}"))
		}
	}
}