buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'org.ow2.asm:asm:9.7.1'
		classpath 'org.ow2.asm:asm-tree:9.7.1'
		classpath 'org.ow2.asm:asm-commons:9.7.1'
		// just used for shrinking. i've used proguard a lot and trust it
		classpath 'com.guardsquare:proguard-gradle:7.6.1'
	}
}

plugins {
	id 'com.github.ben-manes.versions' version '0.52.0'
	id 'com.gradleup.shadow' version '8.3.6'
	id 'java-library'
	id 'maven-publish'
}

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Collections;
import java.util.Iterator;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import java.util.zip.ZipFile;
import java.util.zip.ZipOutputStream;

import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.tree.AnnotationNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.LdcInsnNode;

base {
	group = 'com.unascribed'
	archivesName = 'unsup'
	version = '1.1'+(project.hasProperty("unsup.ci") ? '-SNAPSHOT' : '-pre4')
}

sourceCompatibility = targetCompatibility = 8

compileJava {
	options.release = 8
}

repositories { 
	mavenCentral()
	maven { url 'https://repo.sleeping.town' }
	maven { url 'https://repo.unascribed.com' }
}

sourceSets {
	// prevent crossing puppet/agent boundary
	puppet {
		compileClasspath += sourceSets.main.compileClasspath
		compileClasspath += sourceSets.main.output
	}
	agent {
		compileClasspath += sourceSets.main.compileClasspath
		compileClasspath += sourceSets.main.output
	}
}

configurations {
	shade
	implementation.extendsFrom shade
	include
	compileOnly.extendsFrom include
	natives
	compileOnly.extendsFrom natives
}

dependencies {
	def shadeCis = {
		shade(it) {
			transitive = false
		}
	}

	shade 'com.grack:nanojson:1.9'
	shade 'net.i2p.crypto:eddsa:0.3.0'
	shade('com.squareup.okhttp3:okhttp:4.12.0') {
		exclude group: 'org.jetbrains'
		exclude module: 'kotlin-stdlib-common'
	}
	shadeCis 'com.squareup.okhttp3:okhttp-brotli:4.12.0'
	shadeCis 'com.squareup.okhttp3:okhttp-dnsoverhttps:4.12.0'
	shadeCis 'com.squareup.okhttp3:okhttp-tls:4.12.0'
	shadeCis 'com.moandjiezana.toml:toml4j:0.7.2'
	shadeCis 'org.brotli:dec:0.1.2'
	shade 'com.unascribed:flexver-java:1.1.1'
	shade 'me.saharnooby:qoi-java:1.2.1'
	
	lwjgl(it, '3.3.6', 'glfw', 'opengl', 'freetype')
}

jar {
	archiveClassifier = 'slim'
	destinationDirectory.set(file('build/tmp'))
	from sourceSets.puppet.output
	from sourceSets.agent.output
}

shadowJar {
	archiveClassifier = 'fat'
	destinationDirectory.set(file('build/tmp'))
	configurations = [project.configurations.shade]
	
	def pfx = 'com.unascribed.sup.lib.'
	
	relocate 'com.grack.nanojson', pfx+'nanojson'
	relocate 'com.moandjiezana.toml', pfx+'toml'
	relocate 'com.unascribed.flexver', pfx+'flexver'
	relocate 'me.saharnooby.qoi', pfx+'qoi'
	relocate 'net.i2p.crypto.eddsa', pfx+'eddsa'
	relocate 'kotlin', pfx+'kotlin'
	relocate 'okhttp3', pfx+'okhttp3'
	relocate 'okio', pfx+'okio'
	relocate 'org.brotli.dec', pfx+'brotli'
	
	from sourceSets.puppet.output
	from sourceSets.agent.output
	
	exclude 'javax/annotation/**'
}

tasks.named("dependencyUpdates").configure {
	gradleReleaseChannel = 'current'
	revision = 'release'
	rejectVersionIf {
		it.candidate.version.contains("alpha") || it.candidate.version.contains("beta")
	}
}

def pgLibJars = files(
	System.properties["java.home"]+"/jmods/java.base.jmod", // everyone needs java base
	System.properties["java.home"]+"/jmods/java.desktop.jmod", // used by the puppet
	System.properties["java.home"]+"/jmods/java.management.jmod", // for the agent
	System.properties["java.home"]+"/jmods/java.xml.jmod", // html renderer in the opengl puppet
)

task proguard(type: proguard.gradle.ProGuardTask) {
	dependsOn shadowJar
	injars shadowJar.archivePath
	libraryjars pgLibJars
	outjars 'build/tmp/proguard.jar'
	
	dontobfuscate
	dontoptimize
	
	keep(allowshrinking: true, 'class * { *; }')
	
	keep 'class com.unascribed.sup.agent.Agent { *; }'
	keep 'class com.unascribed.sup.puppet.Puppet { *; }'
	keep 'class com.unascribed.sup.Unsup { *; }'
	
	keepclassmembers 'enum * { public static **[] values(); public static ** valueOf(java.lang.String); }'

	dontwarn 'com.unascribed.sup.lib.**'
	dontwarn 'org.jetbrains.annotations.**'
	dontwarn 'org.lwjgl.**'
	dontwarn 'javax.annotation.**'
	dontwarn 'com.unascribed.sup.puppet.opengl.util.GL'
	dontwarn 'sun.misc.**'
	
	keepattributes '*'
	
	verbose
}

task brotliDepJars {}

task proguardJar(type: Jar) {
	dependsOn proguard
	dependsOn brotliDepJars
	from(zipTree('build/tmp/proguard.jar'))
	
	from(fileTree('build/tmp/depjars')) {
		into 'com/unascribed/sup/jars'
	}
	
	exclude 'com/unascribed/sup/lib/okhttp3/internal/platform/android/**'
	exclude 'com/unascribed/sup/lib/okhttp3/internal/platform/Android*'
	
	exclude 'META-INF/**'
	exclude '**/*.kotlin_metadata'
	exclude '**/*.kotlin_builtins'
	exclude '**/*.ttc'
	
	def ver = project.version
	if (ver.endsWith("-SNAPSHOT")) {
		ver = ver+" ("+new java.text.SimpleDateFormat("YYYY-MM-dd HH:mm").format(new java.util.Date())+")"
	}
	
	manifest {
		attributes (
			'Main-Class': 'com.unascribed.sup.agent.Agent',
			'Premain-Class': 'com.unascribed.sup.agent.Agent',
			
			'Implementation-Title': 'unsup',
			'Implementation-Version': ver
		)
	}
}

project.configurations.include.resolve().each { file ->
	def t = task("uncompressedJar_"+file.name, type: Jar) {
		from zipTree(file)
		archiveFileName.set(file.name)
		destinationDirectory.set(project.file('build/tmp/depjars'))
		entryCompression = 'stored'
	}
	def bt = task("brotliJar_"+file.name, type:Exec) {
		dependsOn t
		if (project.hasProperty("unsup.ci")) {
			environment 'LD_LIBRARY_PATH', './.ci'
			commandLine './.ci/brotli', '-Zj', 'build/tmp/depjars/'+file.name
		} else {
			commandLine 'brotli', '-Zj', 'build/tmp/depjars/'+file.name
		}
	}
	brotliDepJars.dependsOn bt
}

build.dependsOn proguardJar

def sigFile = file('build/libs/unsup-'+version+'.jar.sig')

if (project.hasProperty("unsup.signifyKey")) {
	task sign(type: Exec) {
		def pwCmd = project.getProperty("unsup.signifyPasswordCommand");
		doFirst {
			def pipe = new PipedInputStream()
			standardInput pipe
		
			def p = new ProcessBuilder(pwCmd.split(" "))
				.redirectError(ProcessBuilder.Redirect.INHERIT)
				.start()
			p.outputStream.close()
			def pipeout = new PipedOutputStream(pipe)
			p.inputStream.transferTo pipeout
			pipeout.close()
		}		
		dependsOn proguardJar
		inputs.file proguardJar.archivePath
		outputs.file sigFile
		commandLine 'signify', '-S', '-s', project.getProperty("unsup.signifyKey"), '-m', proguardJar.archivePath.absolutePath, '-x', sigFile.absolutePath
	}
} else if (project.hasProperty("unsup.ci")) {
	task sign(type: Exec) {
		doFirst {
			new File('/tmp/signify.sec').text = System.getenv("SIGNIFY_KEY")+'\n'
			standardInput new java.io.ByteArrayInputStream(System.getenv("SIGNIFY_PASSWORD").getBytes("UTF-8"))
		}
		dependsOn proguardJar
		inputs.file proguardJar.archivePath
		outputs.file sigFile
		commandLine './.ci/signify-openbsd', '-S', '-s', '/tmp/signify.sec', '-m', proguardJar.archivePath.absolutePath, '-x', sigFile.absolutePath
	}
}

publishing {
	repositories {
		if (project.hasProperty("publish-username")) {
			maven {
				url "https://repo-api.sleeping.town/"
				credentials {
					username project.hasProperty("publish-username") ? project.getProperty("publish-username") : null
					password project.hasProperty("publish-password") ? project.getProperty("publish-password") : null
				}
			}
		} else if (project.hasProperty("unsup.ci")) {
			maven {
				url "https://repo-api.sleeping.town/"
				credentials {
					username System.getenv("MAVEN_USERNAME")
					password System.getenv("MAVEN_PASSWORD")
				}
			}
		}
		maven {
			url file('build/maven').toURI().toString()
		}
	}
	publications {
		maven(MavenPublication) {
			groupId = 'com.unascribed'
			artifactId = 'unsup'
			version = project.version

			artifact proguardJar
			if (project.hasProperty("unsup.ci") || project.hasProperty("unsup.signifyKey")) {
				artifact(sigFile) {
					builtBy sign
					extension 'jar.sig'
				}
			}
		}
	}
}

def lwjgl(DependencyHandler deps, String ver, String... modules) {
	def platforms = [
		'linux', 'linux-arm64', 'linux-arm32', 'linux-ppc64le', 'linux-riscv64',
		'macos', 'macos-arm64',
		'windows', 'windows-x86', 'windows-arm64',
		'freebsd',
	]
	
	deps.include(dependencies.create("org.lwjgl:lwjgl:${ver}"))
	modules.each { module ->
		deps.include(dependencies.create("org.lwjgl:lwjgl-${module}:${ver}"))
	}
	platforms.each { platform ->
		deps.natives(dependencies.create("org.lwjgl:lwjgl:${ver}:natives-${platform}"))
		modules.each { module ->
			deps.natives(dependencies.create("org.lwjgl:lwjgl-${module}:${ver}:natives-${platform}"))
		}
	}
}
